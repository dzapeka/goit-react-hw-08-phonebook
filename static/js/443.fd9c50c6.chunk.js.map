{"version":3,"file":"static/js/443.fd9c50c6.chunk.js","mappings":"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","sources":["components/FormLayoutWrapper.jsx","redux/contacts/contacts.selectors.js","components/ContactForm.jsx","components/ContactListItem.jsx","components/ContactList.jsx","components/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { Box } from '@mui/material';\nimport React from 'react';\n\nconst FormLayoutWrapper = ({ children }) => {\n  return (\n    <Box\n      sx={{\n        maxWidth: '300px',\n        margin: 'auto',\n      }}\n    >\n      {children}\n    </Box>\n  );\n};\n\nexport default FormLayoutWrapper;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsStore.contacts.items;\nexport const selectContactsError = state => state.contactsStore.contacts.error;\nexport const selectContactsIsLoading = state =>\n  state.contactsStore.contacts.isLoading;\nexport const selectContactsFilter = state => state.contactsStore.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectContactsFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from 'redux/contacts/contacts.operations';\nimport { Notify } from 'notiflix';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\nimport { Box, Button, TextField } from '@mui/material';\n\nexport const ContactForm = () => {\n  const [formData, setFormData] = useState({ name: '', number: '' });\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isExists = contacts.some(\n      contact => contact.name.toLowerCase() === formData.name.toLowerCase()\n    );\n\n    if (isExists) {\n      Notify.info(`${formData.name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContactThunk(formData));\n    setFormData({ name: '', number: '' });\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    let sanitizedValue = value;\n    if (name === 'number') {\n      sanitizedValue = value.replace(/[^0-9-+]/g, '');\n    }\n\n    setFormData(prevData => ({ ...prevData, [name]: sanitizedValue }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: '14px' }}>\n        <TextField\n          name=\"name\"\n          value={formData.name}\n          onChange={handleChange}\n          id=\"name-input\"\n          label=\"Name\"\n          size=\"small\"\n          autoComplete=\"off\"\n          spellCheck={false}\n          inputProps={{\n            pattern: \"^[0-9a-zA-Zа-яА-ЯїіІ'Ї\\\\s]+$\",\n            maxLength: 30,\n            minLength: 3,\n            required: true,\n          }}\n        />\n        <TextField\n          name=\"number\"\n          value={formData.number}\n          onChange={handleChange}\n          id=\"number-input\"\n          label=\"Number\"\n          size=\"small\"\n          autoComplete=\"off\"\n          maxLength=\"12\"\n          minLength=\"3\"\n          inputProps={{\n            maxLength: 15,\n            minLength: 3,\n            required: true,\n          }}\n        />\n        <Button variant=\"contained\" type=\"submit\">\n          Add contact\n        </Button>\n      </Box>\n    </form>\n  );\n};\n","import { useDispatch } from 'react-redux';\n\nimport { deleteContactThunk } from 'redux/contacts/contacts.operations';\nimport { Grid, IconButton, ListItem, Typography } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContactThunk(id));\n  };\n\n  return (\n    <ListItem\n      secondaryAction={\n        <IconButton\n          edge=\"end\"\n          aria-label=\"delete\"\n          onClick={handleDeleteContact}\n        >\n          <DeleteIcon />\n        </IconButton>\n      }\n    >\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={6}>\n          <Typography variant=\"body1\" sx={{ fontSize: '1.2rem' }}>\n            {name}\n          </Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography variant=\"body1\" sx={{ color: '#666' }}>\n            {number}\n          </Typography>\n        </Grid>\n      </Grid>\n    </ListItem>\n  );\n};\n","import { ContactListItem } from 'components/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/contacts.selectors';\nimport { Divider, List } from '@mui/material';\nimport React from 'react';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List dense={false}>\n      {visibleContacts.map((contact, index) => (\n        <React.Fragment key={contact.id}>\n          <ContactListItem {...contact} />\n          {index < visibleContacts.length - 1 && <Divider />}\n        </React.Fragment>\n      ))}\n    </List>\n  );\n};\n","import { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/contacts.reducer';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const filterInputId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <TextField\n      type=\"text\"\n      name=\"filter\"\n      onChange={handleChange}\n      label=\"Find contacts by name\"\n      id={filterInputId}\n      autoComplete=\"off\"\n      size=\"small\"\n      sx={{\n        width: '100%',\n        marginBottom: '16px',\n      }}\n    />\n  );\n};\n","import { Box, Typography } from '@mui/material';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport FormLayoutWrapper from 'components/FormLayoutWrapper';\nimport Loader from 'components/Loader/Loader';\nimport { Notify } from 'notiflix';\nimport React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContactsThunk } from 'redux/contacts/contacts.operations';\nimport {\n  selectContacts,\n  selectContactsError,\n  selectContactsIsLoading,\n} from 'redux/contacts/contacts.selectors';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectContactsError);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const contacts = useSelector(selectContacts);\n\n  useEffect(() => {\n    if (error) {\n      Notify.failure(error);\n    }\n  }, [error]);\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts | Phonebook </title>\n      </Helmet>\n      <Typography variant=\"h4\" textAlign=\"center\" marginBottom={1}>\n        Add new contact\n      </Typography>\n      <FormLayoutWrapper>\n        <ContactForm />\n      </FormLayoutWrapper>\n\n      <Typography\n        variant=\"h4\"\n        textAlign=\"center\"\n        marginBottom={1}\n        marginTop={6}\n      >\n        Contacts\n      </Typography>\n      <Box\n        maxWidth=\"500px\"\n        border=\"1px solid #ccc\"\n        margin=\"auto\"\n        padding=\"16px\"\n      >\n        {isLoading ? (\n          <Loader />\n        ) : contacts.length > 0 ? (\n          <>\n            {contacts.length > 1 && <Filter />}\n            <ContactList />\n          </>\n        ) : (\n          <Typography sx={{ textAlign: 'center' }}>\n            Your contacts list is empty. Let's add your first one!\n          </Typography>\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["children","sx","maxWidth","margin","selectContacts","state","contactsStore","contacts","items","selectContactsError","error","selectContactsIsLoading","isLoading","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","ContactForm","useState","number","formData","setFormData","dispatch","useDispatch","useSelector","handleChange","event","target","value","sanitizedValue","replace","prevData","onSubmit","preventDefault","some","Notify","addContactThunk","Box","display","flexDirection","gap","TextField","onChange","id","label","size","autoComplete","spellCheck","inputProps","pattern","maxLength","minLength","required","Button","variant","type","ContactListItem","ListItem","secondaryAction","IconButton","edge","onClick","deleteContactThunk","Delete","Grid","container","spacing","alignItems","item","xs","Typography","fontSize","color","ContactList","visibleContacts","List","dense","map","index","length","Divider","Filter","filterInputId","nanoid","setFilter","width","marginBottom","useEffect","fetchContactsThunk","Helmet","textAlign","FormLayoutWrapper","marginTop","border","padding","Loader"],"sourceRoot":""}
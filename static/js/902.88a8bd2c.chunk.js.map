{"version":3,"file":"static/js/902.88a8bd2c.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/contacts.selectors.js","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContectListItem.module.css?8550","components/ContactListItem/ContactListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"contactForm\":\"ContactForm_contactForm__y0Rca\",\"labelText\":\"ContactForm_labelText__JB4h1\",\"addContactBtn\":\"ContactForm_addContactBtn__3KI6e\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsStore.contacts.items;\nexport const selectContactsError = state => state.contactsStore.contacts.error;\nexport const selectContactsIsLoading = state =>\n  state.contactsStore.contacts.isLoading;\nexport const selectContactsFilter = state => state.contactsStore.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectContactsFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styles from './ContactForm.module.css';\nimport { addContact } from 'redux/contacts/contacts.operations';\nimport { Notify } from 'notiflix';\nimport { selectContacts } from 'redux/contacts/contacts.selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const nameInputId = nanoid();\n  const phoneInputId = nanoid();\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const isExists = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isExists) {\n      Notify.info(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact({ name, phone }));\n    setName('');\n    setPhone('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    const stateFunctions = {\n      name: setName,\n      phone: setPhone,\n    };\n\n    stateFunctions[name]?.(value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.contactForm}>\n      <label htmlFor={nameInputId}>\n        <p className={styles.labelText}>Name</p>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          id={nameInputId}\n          autoComplete=\"off\"\n          required\n          pattern=\"^[a-zA-Zа-яА-ЯїіІ'Ї\\s]+$\"\n        />\n      </label>\n      <label htmlFor={phoneInputId}>\n        <p className={styles.labelText}>Phone</p>\n        <input\n          className=\"phoneNumberInput\"\n          type=\"tel\"\n          name=\"phone\"\n          value={phone}\n          onChange={handleChange}\n          id={phoneInputId}\n          autoComplete=\"off\"\n          required\n          pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n          placeholder=\"xxx-xx-xx\"\n          maxLength=\"9\"\n        />\n      </label>\n      <button type=\"submit\" className={styles.addContactBtn}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"deleteContactBtn\":\"ContectListItem_deleteContactBtn__KBrFo\"};","import { useDispatch } from 'react-redux';\nimport styles from './ContectListItem.module.css';\nimport { deleteContact } from 'redux/contacts/contacts.operations';\n\nexport const ContactListItem = ({ id, name, phone }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <li className={styles.contactListItem}>\n      {name}: {phone}\n      <button\n        className={styles.deleteContactBtn}\n        onClick={handleDeleteContact}\n        type=\"button\"\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import { ContactListItem } from 'components/ContactListItem';\nimport { useSelector } from 'react-redux';\n\nimport styles from './ContactList.module.css';\nimport { selectVisibleContacts } from 'redux/contacts/contacts.selectors';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul className={styles.contactList}>\n      {visibleContacts.map(contact => (\n        <ContactListItem key={contact.id} {...contact} />\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"labelText\":\"Filter_labelText__vRYcr\"};","import { nanoid } from 'nanoid';\nimport styles from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/contacts.reducer';\n\nexport const Filter = () => {\n  const filterInputId = nanoid();\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <label htmlFor={filterInputId}>\n      <p className={styles.labelText}>Find contacts by name</p>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleChange}\n        id={filterInputId}\n        autoComplete=\"off\"\n        required\n      />\n    </label>\n  );\n};\n","import { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { Filter } from 'components/Filter';\nimport Loader from 'components/Loader/Loader';\nimport { Notify } from 'notiflix';\nimport React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts.operations';\nimport {\n  selectContactsError,\n  selectContactsIsLoading,\n} from 'redux/contacts/contacts.selectors';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const error = useSelector(selectContactsError);\n  const isLoading = useSelector(selectContactsIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (error) {\n      Notify.failure(error);\n    }\n  }, [error]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts | Phonebook </title>\n      </Helmet>\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        {isLoading ? <Loader /> : <ContactList />}\n      </div>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contactsStore","contacts","items","selectContactsError","error","selectContactsIsLoading","isLoading","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","ContactForm","useState","setName","phone","setPhone","nameInputId","phoneInputId","dispatch","useDispatch","useSelector","handleChange","event","target","value","stateFunctions","onSubmit","preventDefault","some","Notify","addContact","className","styles","htmlFor","type","onChange","autoComplete","required","pattern","placeholder","maxLength","ContactListItem","onClick","deleteContact","ContactList","visibleContacts","map","Filter","filterInputId","setFilter","useEffect","fetchContacts","Helmet","Loader"],"sourceRoot":""}